// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentRegistry {
    struct Student {
        uint studentId;
        string name;
        uint age;
    }

    Student[] public students;

    event StudentAdded(uint studentId, string name, uint age);

    // Fallback function to accept Ether transfers
    receive() external payable {}

    function addStudent(uint _studentId, string memory _name, uint _age) external {
        Student memory newStudent = Student(_studentId, _name, _age);
        students.push(newStudent);
        emit StudentAdded(_studentId, _name, _age);
    }

    function getStudent(uint index) external view returns (uint, string memory, uint) {
        require(index < students.length, "Student not found");
        Student memory student = students[index];
        return (student.studentId, student.name, student.age);
    }

    function getStudentsCount() external view returns (uint) {
        return students.length;
    }
}
